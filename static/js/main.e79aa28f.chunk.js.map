{"version":3,"sources":["Main/GetCardList.js","Main/ShowCardInfo/CreateCardLayout.js","Main/ShowCardInfo/normal/ShowNormalCardInfo.js","Main/ShowCardInfo/split/ShowSplitCardInfo.js","Main/ShowCardInfo/doubleFaces/ShowDoubleFacesCardInfo.js","Main/ShowCardInfo/ShowCardInfo.js","Main/InputSearchConditions/InputSearchConditions.js","Main/Main.js","Header.js","App.js","index.js"],"names":["compareCMC","a","b","cmc","GetCardList","searchCondition","Promise","resolve","cardList","oracleIdSet","Set","SearchURL","cardName","idColor","fetch","then","res","json","data","Object","keys","map","key","forEach","cardInfo","add","oracle_id","has","push","sort","CardName","printed_name","name","CardText","printed_text","cardText","oracle_text","CreateCardLayout","className","color_identity","ShowNormalCardInfo","image","image_uris","CreateNormalCardLayout","src","small","ShowSplitCardInfo","ref1","ref2","cardLayout","card_faces","card","ref","style","textAlign","id","type","onClick","e","current","scrollIntoView","behavior","block","inline","display","fontSize","ShowDoubleFacesCardInfo","image1","image2","classList","contains","remove","height","clientHeight","ShowCardInfo","index","includes","layout","InputSearchConditions","props","value","searchWord","onChange","handleCardNameChange","handleIdColorChange","ShowCardList","React","forwardRef","Main","useState","setCardList","searchConditions","setSearchConditions","timeoutId","setTimeoutId","elsRef","useRef","Array","fill","createRef","useEffect","clearTimeout","setTimeout","result","target","checked","toString","replace","length","Header","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e79aa28f.chunk.js","sourcesContent":["const API = 'https://api.scryfall.com/cards/search?q='\r\n\r\nconst GetCardList = (searchCondition) => {\r\n  return new Promise(function(resolve){\r\n      let cardList = [];\r\n      let oracleIdSet = new Set();\r\n\r\n      let SearchURL = 'https://api.scryfall.com/cards/search?q='\r\n\r\n      if(searchCondition.cardName) SearchURL += ('+name:' + searchCondition.cardName);\r\n      if(searchCondition.idColor) SearchURL += ('+id>=' + searchCondition.idColor);\r\n\r\n      if(SearchURL === API) resolve(cardList)\r\n      \r\n      //日本語のリストを先に取得\r\n      fetch(SearchURL + '+lang:ja')\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        if(json.data) cardList = Object.keys(json.data).map(function (key) {return json.data[key]});\r\n        cardList.forEach(cardInfo => oracleIdSet.add(cardInfo.oracle_id))\r\n      })\r\n      .then(() => {\r\n\r\n        //英語のリストを取得し日本語のリストに追加\r\n        fetch(SearchURL)\r\n        .then(res => res.json())\r\n        .then(json => json.data)\r\n        .then(data => {\r\n          if(data) data.forEach(\r\n            cardInfo => {\r\n              if(!oracleIdSet.has(cardInfo.oracle_id)) cardList.push(cardInfo)\r\n            })\r\n        })\r\n        .then(() => resolve(cardList.sort(compareCMC)) )\r\n      })\r\n  })\r\n}\r\n\r\nconst compareCMC = (a,b) => {\r\n  return a.cmc < b.cmc ? -1 : 1;\r\n}\r\n\r\n\r\nexport default GetCardList;","import './CardLayoutContainer.css'\r\n\r\nconst CreateCardLayout = (cardInfo) => {\r\n    return(\r\n      <div className=\"cardContainer\">\r\n        <div className=\"item_title\">カード名</div><div className=\"card_item\">{CardName(cardInfo)}</div>\r\n        <div className=\"item_title\">固有色</div><div className=\"card_item\">{cardInfo.color_identity}</div>\r\n        <div className=\"item_title\">テキスト</div><div className=\"card_item\">{CardText(cardInfo)}</div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst CardName = (cardInfo) => {\r\n    \r\n    if(cardInfo.printed_name){\r\n        return <div>{cardInfo.printed_name} // {cardInfo.name}</div>\r\n    }else{\r\n        return <div>{cardInfo.name}</div>\r\n    }\r\n}\r\n\r\nconst CardText = (cardInfo) => {\r\n    if(cardInfo.printed_text){\r\n        const cardText = cardInfo.printed_text\r\n        return <div>{cardText}</div>\r\n    } else {\r\n        const cardText = cardInfo.oracle_text\r\n        return <div>{cardText}</div>\r\n    }\r\n}\r\n\r\nexport default CreateCardLayout;","import '../ShowCardInfo.css';\r\nimport CreateNormalCardLayout from '../CreateCardLayout'\r\n\r\nconst ShowNormalCardInfo = (cardInfo) => {\r\n    const image = cardInfo.image_uris\r\n    return(\r\n        <div className=\"searchResultContainer\">\r\n            {CreateNormalCardLayout(cardInfo)}\r\n            <div className=\"cardImage\"><img src={image.small}></img></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowNormalCardInfo;","import CreateCardLayout from '../CreateCardLayout'\r\nimport './ShowSplitContainer.css';\r\n\r\nconst ShowSplitCardInfo = (cardInfo, ref1, ref2) => {\r\n  const image = cardInfo.image_uris\r\n  const cardLayout = cardInfo.card_faces.map((card) => {\r\n    card.color_identity = cardInfo.color_identity\r\n    return CreateCardLayout(card)})\r\n\r\n  const handleClickLeft = (e) => {\r\n    ref1.current.scrollIntoView(\r\n      {\r\n        behavior: 'smooth',\r\n        block:\"nearest\",  \r\n        inline:\"nearest\",\r\n      }\r\n    )\r\n  }\r\n\r\n  const handleClickRight = (e) => {\r\n    ref2.current.scrollIntoView(\r\n      {\r\n        behavior: 'smooth',\r\n        block:\"nearest\",  \r\n        inline:\"nearest\",\r\n      }\r\n    )\r\n  }\r\n\r\n  return(\r\n    <div className=\"searchResultContainer\">\r\n      <div className=\"splitContainer\">\r\n        <div>\r\n          <div className=\"splitCardLayout\" ref={ref1}>\r\n            {cardLayout[0]}\r\n          </div>\r\n          <div style={{textAlign:\"center\"}}>\r\n            <button id = \"scrollRight\" type = \"button\" onClick = {handleClickRight} style={{display:\"inline-block\"}}>  \r\n              <font style={{fontSize:\"30px\"}}>▶︎</font>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"splitCardLayout\" ref={ref2}>\r\n            {cardLayout[1]}\r\n          </div>\r\n          <div style={{textAlign:\"center\"}}>\r\n            <button id = \"scrollLeft\" type = \"button\" onClick = {handleClickLeft} style={{display:\"inline-block\"}}>  \r\n              <font style={{fontSize:\"30px\"}}>◀</font>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div id=\"cardImage\"><img src={image.small}></img></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n  \r\nexport default ShowSplitCardInfo;","import CreateCardLayout from '../CreateCardLayout'\r\nimport './ShowDoubleFacesCardInfo.css';\r\n\r\nconst ShowDoubleFacesCardInfo = (cardInfo, ref1, ref2) => {\r\n  const image1 = cardInfo.card_faces[0].image_uris\r\n  const image2 = cardInfo.card_faces[1].image_uris\r\n\r\n  const cardLayout = cardInfo.card_faces.map((card) => {\r\n    card.color_identity = cardInfo.color_identity\r\n    return CreateCardLayout(card)})\r\n\r\n  const handleClickRotate = () => {\r\n    if(ref1.current.classList.contains('is-front')){\r\n      ref1.current.classList.remove('is-front')\r\n      ref1.current.classList.add('is-back')\r\n\r\n      ref1.current.style.height = ref2.current.clientHeight + \"px\"\r\n    } else {\r\n      ref1.current.classList.remove('is-back')\r\n      ref1.current.classList.add('is-front')\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  return(\r\n    <div className=\"searchResultContainer\">\r\n      <div>\r\n        <div className=\"wrap is-front\" ref={ref1}>\r\n          <div className=\"card_front\">\r\n            <div className=\"doubleFacesContainer\">\r\n              {cardLayout[0]}\r\n              <div className=\"cardImage\"><img src={image1.small}></img></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"card_back\" ref={ref2}>\r\n            <div className=\"doubleFacesContainer\">\r\n              {cardLayout[1]}\r\n              <div className=\"cardImage\"><img src={image2.small}></img></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <button id = \"rotate\" type = \"button\" className=\"rotateButton\" onClick = {handleClickRotate}>  \r\n            回転\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n  \r\nexport default ShowDoubleFacesCardInfo;","import ShowNormalCardInfo from './normal/ShowNormalCardInfo';\r\nimport ShowSplitCardInfo from './split/ShowSplitCardInfo';\r\nimport ShowDoubleFacesCardInfo from './doubleFaces/ShowDoubleFacesCardInfo';\r\n\r\nimport './ShowCardInfo.css';\r\n\r\nconst ShowCardInfo = (cardInfo, ref, index) => {\r\n  if(['normal', 'class'].includes(cardInfo.layout)){\r\n    return(\r\n      <div>\r\n        {ShowNormalCardInfo(cardInfo)}\r\n      </div>\r\n    )\r\n  }else if(cardInfo.layout === 'transform' || cardInfo.layout === 'modal_dfc'){\r\n    return(\r\n      <div>\r\n        {ShowDoubleFacesCardInfo(cardInfo, ref.current[index*2], ref.current[index*2+1])}\r\n      </div>\r\n    )\r\n  } else if(cardInfo.layout === 'split'){\r\n    return(\r\n      <div>\r\n        {ShowSplitCardInfo(cardInfo, ref.current[index*2], ref.current[index*2+1])}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ShowCardInfo;","const InputSearchConditions = (props) => {\r\n    return(\r\n      <div>\r\n        <div>カード名　<input type=\"search\" value={props.searchWord} onChange={e => props.handleCardNameChange(e)} /></div>\r\n        <div>\r\n          固有色　　\r\n          <input type=\"checkbox\" name=\"idColor\" value=\"W\" onChange={e => props.handleIdColorChange(e)}></input>白\r\n          <input type=\"checkbox\" name=\"idColor\" value=\"U\" onChange={e => props.handleIdColorChange(e)}></input>青\r\n          <input type=\"checkbox\" name=\"idColor\" value=\"B\" onChange={e => props.handleIdColorChange(e)}></input>黒\r\n          <input type=\"checkbox\" name=\"idColor\" value=\"R\" onChange={e => props.handleIdColorChange(e)}></input>赤\r\n          <input type=\"checkbox\" name=\"idColor\" value=\"G\" onChange={e => props.handleIdColorChange(e)}></input>緑\r\n          <input type=\"checkbox\" name=\"idColor\" value=\"C\" onChange={e => props.handleIdColorChange(e)}></input>無色\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default InputSearchConditions;","import React, { useState,useEffect,useRef } from 'react';\r\nimport GetCardList from './GetCardList'\r\nimport ShowCardInfo from './ShowCardInfo/ShowCardInfo'\r\nimport InputSearchConditions from './InputSearchConditions/InputSearchConditions'\r\n\r\nfunction Main(){\r\n  const [cardList, setCardList] = useState([])\r\n  const [searchConditions, setSearchConditions] = useState({\"idColor\":\"\"})\r\n  const [timeoutId, setTimeoutId] = useState(0)\r\n  const elsRef = useRef(Array(400).fill().map(e => React.createRef()))\r\n\r\n  useEffect(() => {\r\n    clearTimeout(timeoutId)\r\n    setTimeoutId(setTimeout(() => {\r\n      GetCardList(searchConditions)\r\n      .then(\r\n        result => {\r\n          setCardList(result)\r\n        })\r\n      }, 800)\r\n    )\r\n  },[searchConditions])\r\n\r\n  const handleCardNameChange = (e) => {\r\n    setSearchConditions({...searchConditions, \"cardName\":e.target.value})\r\n  }\r\n\r\n  const handleIdColorChange = (e) => {\r\n    let idColor = searchConditions.idColor;\r\n    if(e.target.checked) idColor += e.target.value\r\n    else idColor = idColor.toString().replace(e.target.value, \"\")\r\n    setSearchConditions({...searchConditions, \"idColor\":idColor})\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <InputSearchConditions searchWord={searchConditions.cardName} \r\n        handleCardNameChange={e => handleCardNameChange(e)}\r\n        handleIdColorChange={e => handleIdColorChange(e)} \r\n      />\r\n      <div>検索結果：{cardList.length}件</div>\r\n      <div>\r\n        <ShowCardList cardList={cardList} ref={elsRef}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ShowCardList = React.forwardRef( (props,ref) => {\r\n  return(\r\n    props.cardList.map((value,index) => ShowCardInfo(value, ref, index))\r\n  )\r\n})\r\n\r\nexport default Main;","import React from 'react';\r\nimport './Header.css'\r\n\r\nfunction Header(){\r\n    return(\r\n        <h1>EDH用検索ツール</h1>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css'\nimport Main from \"./Main/Main\";\nimport Header from \"./Header\";\n\nconst API = 'https://api.scryfall.com/cards/search?q=lang:ja+name='\n\nfunction App(){\n  return(\n    <div className=\"container\">\n      <div className=\"header\"><Header /></div>\n      <div className=\"main\"><Main /></div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}