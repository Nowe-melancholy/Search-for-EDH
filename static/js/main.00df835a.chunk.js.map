{"version":3,"sources":["Main/GetCardList.js","Main/ShowCardInfo/CreateCardLayout.js","Main/ShowCardInfo/ShowSplitCardInfo.js","Main/ShowCardInfo/ShowDoubleFacesCardInfo.js","Main/ShowCardInfo/ShowCardInfo.js","Main/Main.js","Header.js","App.js","index.js"],"names":["GetCardList","searchCondition","Promise","resolve","cardList","oracleIdSet","Set","SearchURL","cardName","idColor","fetch","then","res","json","data","Object","keys","map","key","forEach","cardInfo","add","oracle_id","has","push","CardName","printed_name","name","CardText","printed_text","oracle_text","CreateCardLayout","className","color_identity","ShowSplitCardInfo","ref1","ref2","image","image_uris","cardLayout","card_faces","ref","style","textAlign","id","type","onClick","e","current","scrollIntoView","behavior","block","inline","display","fontSize","src","small","ShowDoubleFacesCardInfo","image1","image2","handleClickRotate","classList","contains","remove","ShowCardInfo","elsStates","setElsState","index","layout","InputSearchConditions","props","value","searchWord","onChange","handleCardNameChange","handleIdColorChange","ShowCardList","React","forwardRef","Main","useState","setCardList","searchConditions","setSearchConditions","timeoutId","setTimeoutId","elsRef","useRef","setElsStates","str","useEffect","clearTimeout","setTimeout","result","createRef","Array","length","fill","target","checked","toString","replace","Header","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00df835a.chunk.js","sourcesContent":["const API = 'https://api.scryfall.com/cards/search?q='\r\n\r\nconst GetCardList = (searchCondition) => {\r\n  return new Promise(function(resolve){\r\n      let cardList = [];\r\n      let oracleIdSet = new Set();\r\n\r\n      let SearchURL = 'https://api.scryfall.com/cards/search?q='\r\n\r\n      if(searchCondition.cardName) SearchURL += ('+name:' + searchCondition.cardName);\r\n      if(searchCondition.idColor) SearchURL += ('+id>=' + searchCondition.idColor);\r\n\r\n      if(SearchURL === API) resolve(cardList)\r\n      \r\n      //日本語のリストを先に取得\r\n      fetch(SearchURL + '+lang:ja')\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        if(json.data) cardList = Object.keys(json.data).map(function (key) {return json.data[key]});\r\n        cardList.forEach(cardInfo => oracleIdSet.add(cardInfo.oracle_id))\r\n      })\r\n      .then(() => {\r\n\r\n        //英語のリストを取得し日本語のリストに追加\r\n        fetch(SearchURL)\r\n        .then(res => res.json())\r\n        .then(json => json.data)\r\n        .then(data => {\r\n          if(data) data.forEach(\r\n            cardInfo => {\r\n              if(!oracleIdSet.has(cardInfo.oracle_id)) cardList.push(cardInfo)\r\n            })\r\n        })\r\n        .then(() => resolve(cardList) )\r\n      })\r\n  })\r\n}\r\n\r\n\r\nexport default GetCardList;","const CreateCardLayout = (cardInfo) => {\r\n    return(\r\n      <div className=\"cardContainer\">\r\n        <div className=\"item_title\">カード名</div><div className=\"card_item\">{CardName(cardInfo)}</div>\r\n        <div className=\"item_title\">固有色</div><div className=\"card_item\">{cardInfo.color_identity}</div>\r\n        <div className=\"item_title\">テキスト</div><div className=\"card_item\">{CardText(cardInfo)}</div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst CardName = (cardInfo) => {\r\n    let cardName\r\n\r\n    if(cardInfo.printed_name){\r\n        return <div>{cardInfo.printed_name} // {cardInfo.name}</div>\r\n    }else{\r\n        return <div>{cardInfo.name}</div>\r\n    }\r\n}\r\n\r\nconst CardText = (cardInfo) => {\r\n    if(cardInfo.printed_text){\r\n        return <div>{cardInfo.printed_text}</div>\r\n    } else {\r\n        return <div>{cardInfo.oracle_text}</div>\r\n    }\r\n}\r\n\r\nexport default CreateCardLayout;","import './splitContainer.css';\r\nimport CreateCardLayout from './CreateCardLayout'\r\n\r\nconst ShowSplitCardInfo = (cardInfo, ref1, ref2) => {\r\n  const image = cardInfo.image_uris\r\n  const cardLayout = cardInfo.card_faces.map(CreateCardLayout)\r\n\r\n  const handleClickLeft = (e) => {\r\n    ref1.current.scrollIntoView(\r\n      {\r\n        behavior: 'smooth',\r\n        block:\"nearest\",  \r\n        inline:\"nearest\",\r\n      }\r\n    )\r\n  }\r\n\r\n  const handleClickRight = (e) => {\r\n    ref2.current.scrollIntoView(\r\n      {\r\n        behavior: 'smooth',\r\n        block:\"nearest\",  \r\n        inline:\"nearest\",\r\n      }\r\n    )\r\n  }\r\n\r\n  return(\r\n    <div className=\"searchResultContainer\">\r\n      <div className=\"splitContainer\">\r\n        <div>\r\n          <div className=\"splitCardLayout\" ref={ref1}>\r\n            {cardLayout[0]}\r\n          </div>\r\n          <div style={{textAlign:\"center\"}}>\r\n            <button id = \"scrollRight\" type = \"button\" onClick = {handleClickRight} style={{display:\"inline-block\"}}>  \r\n              <font style={{fontSize:\"30px\"}}>▶︎</font>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"splitCardLayout\" ref={ref2}>\r\n            {cardLayout[1]}\r\n          </div>\r\n          <div style={{textAlign:\"center\"}}>\r\n            <button id = \"scrollLeft\" type = \"button\" onClick = {handleClickLeft} style={{display:\"inline-block\"}}>  \r\n              <font style={{fontSize:\"30px\"}}>◀</font>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div id=\"cardImage\"><img src={image.small}></img></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n  \r\nexport default ShowSplitCardInfo;","import CreateCardLayout from './CreateCardLayout'\r\nimport './ShowDoubleFacesCardInfo.css';\r\n\r\nconst ShowDoubleFacesCardInfo = (cardInfo,ref) => {\r\n  const image1 = cardInfo.card_faces[0].image_uris\r\n  const image2 = cardInfo.card_faces[1].image_uris\r\n  const cardLayout = cardInfo.card_faces.map(CreateCardLayout)\r\n\r\n  const handleClickRotate = () => {\r\n    if(ref.current.classList.contains('is-front')){\r\n      ref.current.classList.remove('is-front')\r\n      ref.current.classList.add('is-back')\r\n    } else {\r\n      ref.current.classList.remove('is-back')\r\n      ref.current.classList.add('is-front')\r\n    }\r\n    \r\n  }\r\n\r\n  return(\r\n    <div className=\"searchResultContainer\">\r\n        \r\n        <div className=\"wrap is-front\" ref={ref}>\r\n          <div className=\"card_front\">\r\n            <div className=\"card\">\r\n              {cardLayout[0]}\r\n              <div id=\"cardImage\"><img src={image1.small}></img></div>\r\n            </div>\r\n            <button id = \"rotate\" type = \"button\" onClick = {handleClickRotate} style={{display:\"inline-block\"}}>  \r\n              <font style={{fontSize:\"30px\"}}>回転</font>\r\n            </button>\r\n          </div>\r\n          <div className=\"card_back\">\r\n            <div className=\"card\">\r\n              {cardLayout[1]}\r\n              <div id=\"cardImage\"><img src={image2.small}></img></div>\r\n            </div>\r\n            <button id = \"rotate\" type = \"button\" onClick = {handleClickRotate} style={{display:\"inline-block\"}}>  \r\n              <font style={{fontSize:\"30px\"}}>回転</font>\r\n            </button>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n  \r\nexport default ShowDoubleFacesCardInfo;","import CreateCardLayout from './CreateCardLayout'\r\nimport ShowSplitCardInfo from './ShowSplitCardInfo';\r\nimport ShowDoubleFacesCardInfo from './ShowDoubleFacesCardInfo';\r\n\r\nconst ShowCardInfo = (cardInfo, elsStates, setElsState, ref, index) => {\r\n    if(cardInfo.layout === 'normal'){\r\n      const image = cardInfo.image_uris\r\n      return(\r\n        <div className=\"searchResultContainer\">\r\n          {CreateCardLayout(cardInfo)}\r\n          <div id=\"cardImage\"><img src={image.small}></img></div>\r\n        </div>\r\n      )\r\n    }else if(cardInfo.layout === 'transform' || cardInfo.layout === 'modal_dfc'){\r\n      return(\r\n        <div>\r\n          {ShowDoubleFacesCardInfo(cardInfo, ref.current[index])}\r\n        </div>\r\n      )\r\n    } else if(cardInfo.layout === 'split'){\r\n      return(\r\n        <div>\r\n          {ShowSplitCardInfo(cardInfo, ref.current[index*2], ref.current[index*2+1])}\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default ShowCardInfo;","import './Main.css';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport GetCardList from './GetCardList'\r\nimport ShowCardInfo from './ShowCardInfo/ShowCardInfo'\r\n\r\nfunction Main(){\r\n  const [cardList, setCardList] = useState([])\r\n  const [searchConditions, setSearchConditions] = useState({\"idColor\":\"\"})\r\n  const [timeoutId, setTimeoutId] = useState(0)\r\n  const elsRef = useRef([])\r\n  const [elsStates, setElsStates] = useState([])\r\n\r\n  const setElsState = (index, str) => {\r\n    elsStates[index] = str\r\n  }\r\n\r\n  useEffect(() => {\r\n    clearTimeout(timeoutId)\r\n    setTimeoutId(setTimeout(() => {\r\n      GetCardList(searchConditions)\r\n      .then(\r\n        result => {\r\n          setCardList(result)\r\n          elsRef.current.push(React.createRef(), React.createRef())\r\n          setElsStates(new Array(result.length).fill(\"is-front\"))\r\n        })\r\n      }, 800)\r\n    )\r\n  },[searchConditions])\r\n\r\n  const handleCardNameChange = (e) => {\r\n    setSearchConditions({...searchConditions, \"cardName\":e.target.value})\r\n  }\r\n\r\n  const handleIdColorChange = (e) => {\r\n    let idColor = searchConditions.idColor;\r\n    if(e.target.checked) idColor += e.target.value\r\n    else idColor = idColor.toString().replace(e.target.value, \"\")\r\n    setSearchConditions({...searchConditions, \"idColor\":idColor})\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <InputSearchConditions searchWord={searchConditions.cardName} \r\n        handleCardNameChange={e => handleCardNameChange(e)}\r\n        handleIdColorChange={e => handleIdColorChange(e)} \r\n      />\r\n      <div>\r\n        <ShowCardList cardList={cardList} elsStates={elsStates} setElsState={()=>setElsState} ref={elsRef}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst InputSearchConditions = (props) => {\r\n  return(\r\n    <div>\r\n      <div>カード名　<input type=\"search\" value={props.searchWord} onChange={e => props.handleCardNameChange(e)} /></div>\r\n      <div>\r\n        固有色　　\r\n        <input type=\"checkbox\" name=\"idColor\" value=\"W\" onChange={e => props.handleIdColorChange(e)}></input>白\r\n        <input type=\"checkbox\" name=\"idColor\" value=\"U\" onChange={e => props.handleIdColorChange(e)}></input>青\r\n        <input type=\"checkbox\" name=\"idColor\" value=\"B\" onChange={e => props.handleIdColorChange(e)}></input>黒\r\n        <input type=\"checkbox\" name=\"idColor\" value=\"R\" onChange={e => props.handleIdColorChange(e)}></input>赤\r\n        <input type=\"checkbox\" name=\"idColor\" value=\"G\" onChange={e => props.handleIdColorChange(e)}></input>緑\r\n        <input type=\"checkbox\" name=\"idColor\" value=\"C\" onChange={e => props.handleIdColorChange(e)}></input>無色\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ShowCardList = React.forwardRef( (props,ref) => {\r\n  return(\r\n    props.cardList.map((value,index) => ShowCardInfo(value, props.elsStates, props.setElsState, ref, index))\r\n  )\r\n})\r\n\r\nexport default Main;","import React from 'react';\r\nimport './Header.css'\r\n\r\nfunction Header(){\r\n    return(\r\n        <h1>EDH用検索ツール</h1>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css'\nimport Main from \"./Main/Main\";\nimport Header from \"./Header\";\n\nconst API = 'https://api.scryfall.com/cards/search?q=lang:ja+name='\n\nfunction App(){\n  return(\n    <div className=\"container\">\n      <div className=\"header\"><Header /></div>\n      <div className=\"main\"><Main /></div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}